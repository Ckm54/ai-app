// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserApiLimit {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @unique
  count                   Int         @default(0)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

// user subscriptions
model UserSubscription {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @unique
  stripeCustomerId        String?     @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId    String?     @unique @map(name: "stripe_subscription_id")
  stripePriceId           String?     @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd  DateTime    @map(name: "stripe_current_period_end")
}

// user model
model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  password                String?
  email                   String   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  chats                   Chat[]
  music                   Music[]
  images                  Image[]
  videos                  Video[]
  codeGenerations         Code[]
}


model Chat {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  conversationId          String?      @db.ObjectId
  createdAt               Json

  conversation            Conversation?   @relation("ChatToConversation")
  user                    User        @relation(fields: [userId], references: [id])
}

// user conversations
model Conversation {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  responses               Json[]
  chatId                  String      @db.ObjectId @unique

  chat                    Chat        @relation("ChatToConversation", fields: [chatId], references: [id])
}

// user music generations
model Music {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  prompt                  String
  responseData            Json

  user                    User        @relation(fields: [userId], references: [id])
}

// user image generations
model Image {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  prompt                  String
  resolution              String
  quantity                String
  response                Json[]

  user                    User        @relation(fields: [userId], references: [id])
}

// user video generations
model Video {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  prompt                  String
  responseData            Json

  user                    User        @relation(fields: [userId], references: [id])
}

// user code generations collection
model Code {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String      @db.ObjectId
  codeGenId               String?      @db.ObjectId
  createdAt               Json

  codeGen                 CodeGen?   @relation("CodeToCodeGen")
  user                    User        @relation(fields: [userId], references: [id])
}
// user code generations
model CodeGen {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  codeId                  String      @db.ObjectId @unique
  responses               Json[]

  code                    Code        @relation("CodeToCodeGen", fields: [codeId], references: [id])
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
